#!/bin/bash
#
# gen-sailfish-patch 1.0.0 (2018-11-11)
# Copyright (C) 2016  Cornerman (https://github.com/cornerman/gen-sailfish-patch)
#               2018-2019  Mirian Margiani
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

DEPENDENCIES=(git sed private-mount private-umount scp ssh rpmbuild)

dependencies() { # 1: echo/no-echo
    ret=0
    print=
    if [[ "$1" == "echo" ]]; then
        print=true
        echo -e "\nDependencies:"
    fi

    for i in "${DEPENDENCIES[@]}"; do
        if which "$i" 2> /dev/null >&2; then
            if [[ -n "$print" ]]; then
                echo "    - $i: $(which "$i")"
            fi
        else
            if [[ -n "$print" ]]; then
                echo "    - $i: missing"
                ret=1
            else
                return 1
            fi
        fi
    done

    return "$ret"
}

version() {
    echo "\
gen-sailfish-patch 1.0.0 (2018-11-11)
Copyright (C) 2016  Cornerman
              2018-2019  Mirian Margiani
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law."
    dependencies echo
}

if ! dependencies no-echo; then
    version
    echo -e "\nerror: missing dependencies" >/dev/stderr
    exit 255
fi

show_help() {
script="$(basename "$0")"
    echo "\
** gen-sailfish-patch **

Generate diff and scaffold for SailfishOS patches.

Generate diff for patches and add necessary patch files if they do not exist
(you need to adapt them to your needs and fill out the 'TODOs').

Run '$script' in a git repository, where all the patched
QML files reside. It expects a branch 'original' with all original qml
files without changes in the same directory structure.

Define a prefix for the path if your directory structure does not start with '/'
by putting the prefix in a file 'build/dir' in the root of your project.

The paths in the resulting diff will be set accordingly.

Note: the script has to be run in the root directory of your project.

Warning: the script has to be adapted for the publish feature to work in your setup!

Usage:
    $script
    $script [-b] [-p]
    $script [-h] [-V]

Arguments:
    -b, --build   - build RPM
    -p, --publish - publish and install patch
    -V, --version - show version and license information
    -h, --help    - show this help and exit
"
}

build_rpm=false
publish_rpm=false

while [[ $# > 0 ]]; do
    case "$1" in
        --help|-h) show_help; exit 0;;
        --version|-V) version; exit 0;;
        -b|--build) build_rpm=true;;
        -p|--publish) publish_rpm=true;;
        -*) echo "unknown option: $1";;
        *) shift; continue;;
    esac
    shift
done

template_dir="$(dirname "$(readlink -f "$0")")/templates"

if [[ ! -d "$template_dir" ]]; then
    echo "error: template directory not found!"
    exit 1
fi

json_file="$template_dir/patch.json"
gitignore_file="$template_dir/gitignore"
spec_file="$template_dir/patch.spec"

out_dir="build"
patch_dir="$out_dir/patch"
rpm_dir="$out_dir/rpm"
prefix_file="$out_dir/dir"


if [[ ! -d .git ]]; then
    echo "error: not in the root directory of a Git repository!"
    exit 2
fi

base="$(pwd)"
project="$(basename "$base")"
project="${project#sfos-}"
project="sfos-patch-${project#patch-}"
project_spec="$base/$rpm_dir/$project.spec"

orig_branch="$(git branch --list | grep -E '^\s*original$')"

if [[ -z "$orig_branch" ]]; then
    echo "error: missing 'original' branch!"
    echo "Create this branch and commit the original QML files without changes."
    echo "The diff is created based on this branch."
    exit 1
fi

if [[ ! -d "$out_dir" ]]; then
    mkdir -p "$out_dir"
fi

if [[ -f "$prefix_file" ]]; then
    prefix_dir="$(cat "$prefix_file" | head -n 1)"
else
    prefix_dir="/"
    echo "$prefix_dir" > "$prefix_file"
fi

if [[ ! -f "$out_dir/.gitignore" ]]; then
    cp "$gitignore_file" "$out_dir/.gitignore"
fi

if [[ ! -d "$rpm_dir" ]]; then
    mkdir -p "$rpm_dir"
    sed "s/Name: NAME/Name: $project/g;" "$spec_file" > "$project_spec"
fi

if [[ ! -d "$patch_dir" ]]; then
    mkdir -p "$patch_dir"
    cp "$json_file" "$patch_dir/patch.json"
fi

git diff original --src-prefix="a$prefix_dir" --dst-prefix="b$prefix_dir" -- . ':(exclude)build/*' > "$patch_dir/unified_diff.patch"

echo "patch generated"


if [[ "$build_rpm" == true ]]; then
    echo "building RPM..."
    cd "$out_dir"
    old_release="$(grep -Pe "^Release: [0-9]*" "$project_spec" | cut -d":" -f2 | cut -d" " -f2)"

    if [[ -z "$old_release" ]]; then
        echo "error: invalid release!"
        echo "build aborted"
        exit 5
    fi

    new_release="$((old_release+1))"

    if [[ -z "$new_release" ]]; then
        echo "error: could not update release number!"
        echo "build aborted"
        exit 5
    fi

    sed -i "s/^Release: $old_release/Release: $new_release/g" "$project_spec"
    echo "release: $new_release"
    rpmbuild -bb --build-in-place "$base/$rpm_dir/$project.spec" --define "_rpmdir $(pwd)/RPMS"

    if [[ $? -ne 0 ]]; then
        echo "error: failed to build RPM"
        exit 1
    fi

    cd "$base"
    echo "RPM built"
fi

if [[ "$publish_rpm" == true ]]; then
    echo "deploying patch..."
    cd "$out_dir"

    if [[ ! -d RPMS/noarch ]]; then
        echo "error: RPM directory not found!"
        exit 1
    fi

    cd RPMS/noarch
    rpm="$(find . -maxdepth 1 -iname "*.rpm" | sort --version-sort | tail -1)"

    if [[ -z "$rpm" ]]; then
        echo "error: no RPM found!"
        exit 1
    fi

    PASSFILE=~/Private/.sfos-passphrase
    if [[ ! -f "$PASSFILE" ]]; then
        echo "warning: passphrase file not found!"
        exit 1
    fi

    pkg="$(basename "$rpm")"
    cap="$(echo "$pkg" | grep -Pe "-[0-9]+\.[0-9]+\.[0-9]+-[0-9]+\.noarch\.rpm" -o)"
    pkg="${pkg%$cap}"

    if [[ -z "$pkg" ]]; then
        echo "error: failed to get RPM name!"
        exit 1
    fi

    scp "$rpm" nemo@handy:/home/nemo/Devel/Patches
    head -1 "$PASSFILE" | ssh handy "devel-su pkcon -y install-local '/home/nemo/Devel/Patches/$(basename "$rpm")'"
    head -1 "$PASSFILE" | ssh handy "devel-su /usr/sbin/patchmanager -a '$pkg'"

    cd "$base"
    echo "patch deployed"
fi
